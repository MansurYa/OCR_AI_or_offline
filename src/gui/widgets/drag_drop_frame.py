"""
–í–∏–¥–∂–µ—Ç –¥–ª—è Drag & Drop —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
"""

import tkinter as tk
from tkinter import messagebox
import os
import logging
from typing import Optional, List

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ tkinterdnd2 –¥–ª—è drag & drop
try:
    from tkinterdnd2 import DND_FILES, TkinterDnD
    HAS_DND_SUPPORT = True
except ImportError:
    HAS_DND_SUPPORT = False

# –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ç–∏–ø–æ–≤
try:
    from ..presenters.main_presenter import MainPresenter
except ImportError:
    MainPresenter = None


class DragDropFrame(tk.Frame):
    """
    –í–∏–¥–∂–µ—Ç –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç drag & drop —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é.
    """

    def __init__(self, parent: tk.Widget):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag & drop –æ–±–ª–∞—Å—Ç–∏.

        :param parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        super().__init__(parent)
        self.logger = logging.getLogger(__name__)

        # Presenter –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–∑–∂–µ
        self.presenter: Optional[MainPresenter] = None

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ drag & drop
        self.is_drag_active = False
        self.original_bg_color = "#f8f9fa"
        self.drag_bg_color = "#e3f2fd"
        self.drag_border_color = "#2196f3"

        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        self.supported_formats = {'.png', '.jpg', '.jpeg', '.tiff', '.bmp', '.gif'}

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
        self.configure(
            bg=self.original_bg_color,
            relief=tk.RAISED,
            bd=2,
            height=120
        )

        # –°–æ–∑–¥–∞–µ–º GUI
        self._create_gui()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag & drop
        if HAS_DND_SUPPORT:
            self._setup_drag_drop()
        else:
            self._setup_fallback_interface()

    def set_presenter(self, presenter) -> None:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç presenter –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.

        :param presenter: –≠–∫–∑–µ–º–ø–ª—è—Ä MainPresenter
        """
        self.presenter = presenter

    def _create_gui(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å drag & drop –æ–±–ª–∞—Å—Ç–∏."""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = tk.Frame(self, bg=self.original_bg_color)
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # –ò–∫–æ–Ω–∫–∞
        icon_label = tk.Label(
            main_container,
            text="üìÇ",
            font=("Arial", 24),
            bg=self.original_bg_color,
            fg="#6c757d"
        )
        icon_label.pack(pady=(10, 5))

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        if HAS_DND_SUPPORT:
            main_text = "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å—é–¥–∞"
        else:
            main_text = "Drag & Drop –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"

        self.main_label = tk.Label(
            main_container,
            text=main_text,
            font=("Arial", 12, "bold"),
            bg=self.original_bg_color,
            fg="#495057"
        )
        self.main_label.pack(pady=2)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        if HAS_DND_SUPPORT:
            sub_text = "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤"
        else:
            sub_text = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"

        self.sub_label = tk.Label(
            main_container,
            text=sub_text,
            font=("Arial", 10),
            bg=self.original_bg_color,
            fg="#6c757d"
        )
        self.sub_label.pack(pady=2)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        formats_text = "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PNG, JPG, JPEG, TIFF, BMP, GIF"
        formats_label = tk.Label(
            main_container,
            text=formats_text,
            font=("Arial", 8),
            bg=self.original_bg_color,
            fg="#adb5bd"
        )
        formats_label.pack(pady=(10, 5))

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–ª–∏–∫ –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        self._bind_click_events(main_container)

    def _bind_click_events(self, container: tk.Widget) -> None:
        """
        –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–∞ –∫ –≤–∏–¥–∂–µ—Ç–∞–º.

        :param container: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≤–∏–¥–∂–µ—Ç–∞–º–∏
        """
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–ª–∏–∫ –∫–æ –≤—Å–µ–º –≤–∏–¥–∂–µ—Ç–∞–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        def bind_recursive(widget):
            widget.bind("<Button-1>", self._on_click)
            for child in widget.winfo_children():
                bind_recursive(child)

        bind_recursive(container)
        self.bind("<Button-1>", self._on_click)

    def _setup_drag_drop(self) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç drag & drop —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å."""
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±–ª–∞—Å—Ç—å –¥–ª—è drag & drop
            self.drop_target_register(DND_FILES)

            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è drag & drop
            self.dnd_bind('<<DropEnter>>', self._on_drag_enter)
            self.dnd_bind('<<DropLeave>>', self._on_drag_leave)
            self.dnd_bind('<<Drop>>', self._on_drop)

            self.logger.info("Drag & Drop —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ drag & drop: {e}")
            self._setup_fallback_interface()

    def _setup_fallback_interface(self) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–µ–∑ drag & drop."""
        self.main_label.configure(text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
        self.sub_label.configure(text="Drag & Drop –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–π —Å–∏—Å—Ç–µ–º–µ")

        # –ò–∑–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è drag & drop
        self.configure(bg="#fff3cd", relief=tk.FLAT)
        for child in self.winfo_children():
            self._update_widget_bg(child, "#fff3cd")

    def _update_widget_bg(self, widget: tk.Widget, color: str) -> None:
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –≤–∏–¥–∂–µ—Ç–æ–≤.

        :param widget: –í–∏–¥–∂–µ—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        :param color: –ù–æ–≤—ã–π —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
        """
        try:
            if hasattr(widget, 'configure'):
                widget.configure(bg=color)
            for child in widget.winfo_children():
                self._update_widget_bg(child, color)
        except tk.TclError:
            pass  # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–∂–µ—Ç—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ bg

    def _on_drag_enter(self, event) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ –æ–±–ª–∞—Å—Ç—å drag."""
        self.is_drag_active = True
        self._update_drag_appearance(True)

    def _on_drag_leave(self, event) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ–±–ª–∞—Å—Ç–∏ drag."""
        self.is_drag_active = False
        self._update_drag_appearance(False)

    def _on_drop(self, event) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è drop (–æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤).

        :param event: –°–æ–±—ã—Ç–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ñ–∞–π–ª–∞—Ö
        """
        self.is_drag_active = False
        self._update_drag_appearance(False)

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Å–æ–±—ã—Ç–∏—è
            files = self._parse_drop_data(event.data)

            if files:
                self._process_dropped_files(files)
            else:
                messagebox.showwarning(
                    "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤",
                    "–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                    parent=self
                )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ drop —Å–æ–±—ã—Ç–∏—è: {e}")
            messagebox.showerror(
                "–û—à–∏–±–∫–∞",
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤:\n{e}",
                parent=self
            )

    def _parse_drop_data(self, data: str) -> List[str]:
        """
        –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ drop —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º.

        :param data: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç drop —Å–æ–±—ã—Ç–∏—è
        :return: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
        """
        # –£–¥–∞–ª—è–µ–º —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
        if data.startswith('{') and data.endswith('}'):
            data = data[1:-1]

        # –†–∞–∑–¥–µ–ª—è–µ–º –ø—É—Ç–∏, —É—á–∏—Ç—ã–≤–∞—è –ø—Ä–æ–±–µ–ª—ã –≤ –∏–º–µ–Ω–∞—Ö —Ñ–∞–π–ª–æ–≤
        paths = []
        current_path = ""
        in_quotes = False

        i = 0
        while i < len(data):
            char = data[i]

            if char == '"':
                in_quotes = not in_quotes
            elif char == ' ' and not in_quotes:
                if current_path.strip():
                    paths.append(current_path.strip())
                    current_path = ""
            else:
                current_path += char

            i += 1

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—É—Ç—å
        if current_path.strip():
            paths.append(current_path.strip())

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—É—Ç–∏
        valid_paths = []
        for path in paths:
            # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏
            clean_path = path.strip('"\'')
            if os.path.exists(clean_path):
                valid_paths.append(clean_path)

        return valid_paths

    def _process_dropped_files(self, paths: List[str]) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ç–∞—â–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏.

        :param paths: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –∏ –ø–∞–ø–∫–∞–º
        """
        if not self.presenter:
            self.logger.warning("Presenter –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª—ã")
            return

        files_to_add = []
        directories_to_process = []

        # –†–∞–∑–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏
        for path in paths:
            if os.path.isfile(path):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
                _, ext = os.path.splitext(path)
                if ext.lower() in self.supported_formats:
                    files_to_add.append(path)
            elif os.path.isdir(path):
                directories_to_process.append(path)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        if files_to_add:
            result = self.presenter.add_files(files_to_add)
            self._show_add_result(result, "—Ñ–∞–π–ª–æ–≤")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–ø–∫–∏
        for directory in directories_to_process:
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π –ø–∞–ø–∫–∏
            if directory == directories_to_process[0] and len(directories_to_process) == 1:
                recursive = messagebox.askyesno(
                    "–ü–æ–∏—Å–∫ –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö",
                    f"–ò—Å–∫–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ –≤—Å–µ—Ö –ø–æ–¥–ø–∞–ø–∫–∞—Ö –ø–∞–ø–∫–∏ '{os.path.basename(directory)}'?",
                    parent=self
                )
            else:
                recursive = False  # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫

            result = self.presenter.add_directory(directory, recursive)
            self._show_add_result(result, f"–∏–∑ –ø–∞–ø–∫–∏ '{os.path.basename(directory)}'")

    def _show_add_result(self, result: dict, source_description: str) -> None:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤.

        :param result: –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        :param source_description: –û–ø–∏—Å–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
        """
        added = len(result.get('added', []))
        skipped = len(result.get('skipped', []))
        invalid = len(result.get('invalid', []))

        if added == 0 and (skipped > 0 or invalid > 0):
            messages = []
            if skipped > 0:
                messages.append(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã): {skipped}")
            if invalid > 0:
                messages.append(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {invalid}")

            messagebox.showwarning(
                "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤",
                f"–ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ {source_description}.\n\n" + "\n".join(messages),
                parent=self
            )
        elif added > 0 and (skipped > 0 or invalid > 0):
            messages = [f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {added}"]
            if skipped > 0:
                messages.append(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
            if invalid > 0:
                messages.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {invalid}")

            messagebox.showinfo(
                "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤",
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {source_description}:\n\n" + "\n".join(messages),
                parent=self
            )

    def _update_drag_appearance(self, is_dragging: bool) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –≤–æ –≤—Ä–µ–º—è drag –æ–ø–µ—Ä–∞—Ü–∏–∏.

        :param is_dragging: True –µ—Å–ª–∏ –∏–¥–µ—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
        """
        if is_dragging:
            # –°—Ç–∏–ª—å –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
            self.configure(
                bg=self.drag_bg_color,
                relief=tk.RIDGE,
                bd=3
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            if hasattr(self, 'main_label'):
                self.main_label.configure(
                    text="üì• –û—Ç–ø—É—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª—ã –∑–¥–µ—Å—å",
                    fg=self.drag_border_color
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –¥–æ—á–µ—Ä–Ω–∏—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
            for child in self.winfo_children():
                self._update_widget_bg(child, self.drag_bg_color)
        else:
            # –û–±—ã—á–Ω—ã–π —Å—Ç–∏–ª—å
            self.configure(
                bg=self.original_bg_color,
                relief=tk.RAISED,
                bd=2
            )

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
            if hasattr(self, 'main_label'):
                if HAS_DND_SUPPORT:
                    text = "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å—é–¥–∞"
                else:
                    text = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"

                self.main_label.configure(
                    text=text,
                    fg="#495057"
                )

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –¥–æ—á–µ—Ä–Ω–∏—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
            for child in self.winfo_children():
                self._update_widget_bg(child, self.original_bg_color)

    def _on_click(self, event) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞."""
        if not self.presenter:
            return

        from tkinter import filedialog

        filetypes = [
            ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.png *.jpg *.jpeg *.tiff *.bmp *.gif"),
            ("PNG —Ñ–∞–π–ª—ã", "*.png"),
            ("JPEG —Ñ–∞–π–ª—ã", "*.jpg *.jpeg"),
            ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
        ]

        files = filedialog.askopenfilenames(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            filetypes=filetypes,
            parent=self
        )

        if files:
            result = self.presenter.add_files(list(files))
            self._show_add_result(result, "—á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞")

    def update_supported_formats(self, formats: set) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.

        :param formats: –ù–æ–≤—ã–π –Ω–∞–±–æ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        """
        self.supported_formats = formats

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
        formats_text = "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: " + ", ".join(
            fmt.upper().lstrip('.') for fmt in sorted(formats)
        )

        # –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º label —Å —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
        for child in self.winfo_children():
            for subchild in child.winfo_children():
                if isinstance(subchild, tk.Label) and "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã" in subchild.cget("text"):
                    subchild.configure(text=formats_text)
                    break

    def set_enabled(self, enabled: bool) -> None:
        """
        –í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç drag & drop –æ–±–ª–∞—Å—Ç—å.

        :param enabled: True –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è, False –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        """
        if enabled:
            self.configure(state=tk.NORMAL)
            if hasattr(self, 'main_label'):
                if HAS_DND_SUPPORT:
                    self.main_label.configure(text="–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å—é–¥–∞")
                else:
                    self.main_label.configure(text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
                self.main_label.configure(fg="#495057")
        else:
            self.configure(state=tk.DISABLED)
            if hasattr(self, 'main_label'):
                self.main_label.configure(
                    text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                    fg="#adb5bd"
                )

    def get_drag_drop_status(self) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ drag & drop.

        :return: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ
        """
        return {
            'has_dnd_support': HAS_DND_SUPPORT,
            'is_drag_active': self.is_drag_active,
            'supported_formats': list(self.supported_formats),
            'is_enabled': str(self.cget('state')) != 'disabled'
        }
