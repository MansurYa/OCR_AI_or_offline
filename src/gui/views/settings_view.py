"""
–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ OCR.
–°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è offline –∏ online —Ä–µ–∂–∏–º–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import logging
from typing import Optional, Dict, Any

# –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ç–∏–ø–æ–≤
try:
    from ..presenters.main_presenter import MainPresenter
    from ..models.settings_model import SettingsModel
except ImportError:
    MainPresenter = None
    SettingsModel = None


class SettingsView(tk.Frame):
    """
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ OCR.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è offline –∏ online —Ä–µ–∂–∏–º–æ–≤.
    """

    def __init__(self, parent: tk.Widget):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.

        :param parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        super().__init__(parent)
        self.logger = logging.getLogger(__name__)

        # Presenter –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–∑–∂–µ
        self.presenter: Optional[MainPresenter] = None

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤
        self.mode_var = tk.StringVar(value="offline")
        self.sort_var = tk.StringVar(value="natural")
        self.output_file_var = tk.StringVar(value="result.txt")

        # Offline –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.language_var = tk.StringVar(value="rus")
        self.psm_var = tk.IntVar(value=3)

        # Online –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.prompt_var = tk.StringVar(value="classic_ocr")
        self.threads_var = tk.IntVar(value=5)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.metadata_var = tk.BooleanVar(value=True)

        # –í–∏–¥–∂–µ—Ç—ã
        self.mode_frame: Optional[tk.LabelFrame] = None
        self.offline_frame: Optional[tk.LabelFrame] = None
        self.online_frame: Optional[tk.LabelFrame] = None
        self.output_frame: Optional[tk.LabelFrame] = None
        self.sort_frame: Optional[tk.LabelFrame] = None

        # –°–æ–∑–¥–∞–µ–º GUI
        self._create_gui()
        self._setup_bindings()

    def set_presenter(self, presenter) -> None:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç presenter –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.

        :param presenter: –≠–∫–∑–µ–º–ø–ª—è—Ä MainPresenter
        """
        self.presenter = presenter
        self.update_from_model()

    def _create_gui(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—É—é –æ–±–ª–∞—Å—Ç—å
        canvas = tk.Canvas(self)
        scrollbar = ttk.Scrollbar(self, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas)

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        # –†–∞–∑–º–µ—â–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self._create_mode_section(scrollable_frame)
        self._create_sort_section(scrollable_frame)
        self._create_offline_section(scrollable_frame)
        self._create_online_section(scrollable_frame)
        self._create_output_section(scrollable_frame)
        self._create_additional_section(scrollable_frame)

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫–æ–ª–µ—Å–∏–∫–æ–º –º—ã—à–∏
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")

        canvas.bind("<MouseWheel>", _on_mousewheel)

    def _create_mode_section(self, parent: tk.Widget) -> None:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ OCR.

        :param parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        self.mode_frame = tk.LabelFrame(parent, text="üîß –†–µ–∂–∏–º OCR", padx=10, pady=10)
        self.mode_frame.pack(fill=tk.X, padx=5, pady=5)

        # –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
        desc_label = tk.Label(
            self.mode_frame,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:",
            font=("Arial", 9)
        )
        desc_label.pack(anchor=tk.W, pady=(0, 10))

        # Offline —Ä–µ–∂–∏–º
        offline_radio = tk.Radiobutton(
            self.mode_frame,
            text="üì¥ Offline (Tesseract OCR)",
            variable=self.mode_var,
            value="offline",
            font=("Arial", 10, "bold"),
            command=self._on_mode_change
        )
        offline_radio.pack(anchor=tk.W, pady=2)

        offline_desc = tk.Label(
            self.mode_frame,
            text="‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —è–∑—ã–∫–æ–≤\n‚Ä¢ –ë–∞–∑–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è",
            font=("Arial", 8),
            fg="#555555",
            justify=tk.LEFT
        )
        offline_desc.pack(anchor=tk.W, padx=20, pady=(0, 10))

        # Online —Ä–µ–∂–∏–º
        online_radio = tk.Radiobutton(
            self.mode_frame,
            text="üåê Online (–ò–ò –º–æ–¥–µ–ª–∏)",
            variable=self.mode_var,
            value="online",
            font=("Arial", 10, "bold"),
            command=self._on_mode_change
        )
        online_radio.pack(anchor=tk.W, pady=2)

        online_desc = tk.Label(
            self.mode_frame,
            text="‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è\n‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã\n‚Ä¢ –¢—Ä–µ–±—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É",
            font=("Arial", 8),
            fg="#555555",
            justify=tk.LEFT
        )
        online_desc.pack(anchor=tk.W, padx=20)

    def _create_sort_section(self, parent: tk.Widget) -> None:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.

        :param parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        self.sort_frame = tk.LabelFrame(parent, text="üî¢ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤", padx=10, pady=10)
        self.sort_frame.pack(fill=tk.X, padx=5, pady=5)

        sort_label = tk.Label(
            self.sort_frame,
            text="–ü–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤:",
            font=("Arial", 9)
        )
        sort_label.pack(anchor=tk.W, pady=(0, 5))

        # Combobox –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.sort_combo = ttk.Combobox(
            self.sort_frame,
            textvariable=self.sort_var,
            state="readonly",
            width=30
        )
        self.sort_combo.pack(fill=tk.X, pady=5)

    def _create_offline_section(self, parent: tk.Widget) -> None:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ offline OCR.

        :param parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        self.offline_frame = tk.LabelFrame(parent, text="üì¥ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Offline OCR", padx=10, pady=10)
        self.offline_frame.pack(fill=tk.X, padx=5, pady=5)

        # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
        lang_frame = tk.Frame(self.offline_frame)
        lang_frame.pack(fill=tk.X, pady=5)

        tk.Label(lang_frame, text="–Ø–∑—ã–∫:", font=("Arial", 9)).pack(side=tk.LEFT)

        self.language_combo = ttk.Combobox(
            lang_frame,
            textvariable=self.language_var,
            state="readonly",
            width=15
        )
        self.language_combo.pack(side=tk.RIGHT, fill=tk.X, expand=True, padx=(10, 0))

        # PSM —Ä–µ–∂–∏–º
        psm_frame = tk.Frame(self.offline_frame)
        psm_frame.pack(fill=tk.X, pady=5)

        tk.Label(psm_frame, text="PSM —Ä–µ–∂–∏–º:", font=("Arial", 9)).pack(side=tk.LEFT)

        self.psm_combo = ttk.Combobox(
            psm_frame,
            textvariable=self.psm_var,
            state="readonly",
            width=15
        )
        self.psm_combo.pack(side=tk.RIGHT, fill=tk.X, expand=True, padx=(10, 0))

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PSM
        psm_info = tk.Label(
            self.offline_frame,
            text="PSM (Page Segmentation Mode) - –∞–ª–≥–æ—Ä–∏—Ç–º –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
            font=("Arial", 8),
            fg="#777777",
            wraplength=250
        )
        psm_info.pack(anchor=tk.W, pady=(5, 0))

    def _create_online_section(self, parent: tk.Widget) -> None:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ online OCR.

        :param parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        self.online_frame = tk.LabelFrame(parent, text="üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Online OCR", padx=10, pady=10)
        self.online_frame.pack(fill=tk.X, padx=5, pady=5)

        # –í—ã–±–æ—Ä –ø—Ä–æ–º–ø—Ç–∞
        prompt_frame = tk.Frame(self.online_frame)
        prompt_frame.pack(fill=tk.X, pady=5)

        tk.Label(prompt_frame, text="–¢–∏–ø OCR:", font=("Arial", 9)).pack(side=tk.LEFT)

        self.prompt_combo = ttk.Combobox(
            prompt_frame,
            textvariable=self.prompt_var,
            state="readonly",
            width=15
        )
        self.prompt_combo.pack(side=tk.RIGHT, fill=tk.X, expand=True, padx=(10, 0))

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
        threads_frame = tk.Frame(self.online_frame)
        threads_frame.pack(fill=tk.X, pady=5)

        tk.Label(threads_frame, text="–ü–æ—Ç–æ–∫–æ–≤:", font=("Arial", 9)).pack(side=tk.LEFT)

        self.threads_spinbox = tk.Spinbox(
            threads_frame,
            from_=1,
            to=20,
            textvariable=self.threads_var,
            width=10
        )
        self.threads_spinbox.pack(side=tk.RIGHT, padx=(10, 0))

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ç–æ–∫–∞—Ö
        threads_info = tk.Label(
            self.online_frame,
            text="–ë–æ–ª—å—à–µ –ø–æ—Ç–æ–∫–æ–≤ = –±—ã—Å—Ç—Ä–µ–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞, –Ω–æ –±–æ–ª—å—à–µ –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ API",
            font=("Arial", 8),
            fg="#777777",
            wraplength=250
        )
        threads_info.pack(anchor=tk.W, pady=(5, 0))

        # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        test_button = tk.Button(
            self.online_frame,
            text="üîó –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
            command=self._on_test_connection,
            bg="#3498db",
            fg="white",
            pady=3
        )
        test_button.pack(fill=tk.X, pady=(10, 0))

    def _create_output_section(self, parent: tk.Widget) -> None:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.

        :param parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        self.output_frame = tk.LabelFrame(parent, text="üíæ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª", padx=10, pady=10)
        self.output_frame.pack(fill=tk.X, padx=5, pady=5)

        # –ü–æ–ª–µ –¥–ª—è –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
        file_frame = tk.Frame(self.output_frame)
        file_frame.pack(fill=tk.X, pady=5)

        self.output_entry = tk.Entry(
            file_frame,
            textvariable=self.output_file_var,
            font=("Arial", 9)
        )
        self.output_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)

        browse_button = tk.Button(
            file_frame,
            text="üìÅ",
            command=self._on_browse_output_file,
            width=3
        )
        browse_button.pack(side=tk.RIGHT, padx=(5, 0))

        # –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö –∏–º–µ–Ω
        quick_frame = tk.Frame(self.output_frame)
        quick_frame.pack(fill=tk.X, pady=(5, 0))

        quick_label = tk.Label(quick_frame, text="–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä:", font=("Arial", 8))
        quick_label.pack(side=tk.LEFT)

        quick_names = ["result.txt", "ocr_output.txt", "extracted_text.txt"]
        for name in quick_names:
            btn = tk.Button(
                quick_frame,
                text=name,
                command=lambda n=name: self.output_file_var.set(n),
                font=("Arial", 7),
                pady=1
            )
            btn.pack(side=tk.RIGHT, padx=1)

    def _create_additional_section(self, parent: tk.Widget) -> None:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.

        :param parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        additional_frame = tk.LabelFrame(parent, text="‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", padx=10, pady=10)
        additional_frame.pack(fill=tk.X, padx=5, pady=5)

        # –í–∫–ª—é—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        metadata_check = tk.Checkbutton(
            additional_frame,
            text="–í–∫–ª—é—á–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
            variable=self.metadata_var,
            command=self._on_metadata_change
        )
        metadata_check.pack(anchor=tk.W, pady=2)

        metadata_desc = tk.Label(
            additional_frame,
            text="–î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö, –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
            font=("Arial", 8),
            fg="#777777",
            wraplength=250
        )
        metadata_desc.pack(anchor=tk.W, padx=20, pady=(0, 10))

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        buttons_frame = tk.Frame(additional_frame)
        buttons_frame.pack(fill=tk.X, pady=(10, 0))

        save_button = tk.Button(
            buttons_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            command=self._on_save_settings,
            bg="#27ae60",
            fg="white",
            pady=3
        )
        save_button.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 2))

        reset_button = tk.Button(
            buttons_frame,
            text="üîÑ –°–±—Ä–æ—Å",
            command=self._on_reset_settings,
            bg="#e74c3c",
            fg="white",
            pady=3
        )
        reset_button.pack(side=tk.RIGHT, fill=tk.X, expand=True, padx=(2, 0))

    def _setup_bindings(self) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π."""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –≤–∏–¥–∂–µ—Ç–∞—Ö
        self.sort_combo.bind("<<ComboboxSelected>>", self._on_sort_change)
        self.language_combo.bind("<<ComboboxSelected>>", self._on_language_change)
        self.psm_combo.bind("<<ComboboxSelected>>", self._on_psm_change)
        self.prompt_combo.bind("<<ComboboxSelected>>", self._on_prompt_change)
        self.threads_spinbox.bind("<FocusOut>", self._on_threads_change)
        self.output_entry.bind("<FocusOut>", self._on_output_file_change)

    def update_from_model(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–¥–∂–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–æ–¥–µ–ª–∏."""
        if not self.presenter:
            return

        settings = self.presenter.get_settings()

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.mode_var.set(settings.ocr_mode)
        self.sort_var.set(settings.sort_method)
        self.output_file_var.set(settings.output_file)
        self.metadata_var.set(settings.include_metadata)

        # –û–±–Ω–æ–≤–ª—è–µ–º offline –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.language_var.set(settings.offline_settings.language)
        self.psm_var.set(settings.offline_settings.psm_mode)

        # –û–±–Ω–æ–≤–ª—è–µ–º online –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.prompt_var.set(settings.online_settings.prompt_name)
        self.threads_var.set(settings.online_settings.max_threads)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π
        self._update_combo_options()

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Å–µ–∫—Ü–∏–π
        self._update_sections_visibility()

    def _update_combo_options(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–ø—Ü–∏–∏ –≤ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–∞—Ö."""
        if not self.presenter:
            return

        settings = self.presenter.get_settings()

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        sort_options = [method['name'] for method in settings.available_sort_methods]
        sort_values = [method['key'] for method in settings.available_sort_methods]

        self.sort_combo['values'] = sort_options
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        current_method = settings.sort_method
        for i, key in enumerate(sort_values):
            if key == current_method:
                self.sort_combo.current(i)
                break

        # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫–∏
        languages = self.presenter.get_available_languages()
        self.language_combo['values'] = languages

        # –û–±–Ω–æ–≤–ª—è–µ–º PSM —Ä–µ–∂–∏–º—ã
        psm_options = [f"{mode['name']}" for mode in settings.available_psm_modes]
        self.psm_combo['values'] = psm_options

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π PSM
        current_psm = settings.offline_settings.psm_mode
        for i, mode in enumerate(settings.available_psm_modes):
            if mode['value'] == current_psm:
                self.psm_combo.current(i)
                break

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç—ã
        prompts = self.presenter.get_available_prompts()
        self.prompt_combo['values'] = prompts

    def _update_sections_visibility(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å —Å–µ–∫—Ü–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞."""
        mode = self.mode_var.get()

        if mode == "offline":
            self.offline_frame.pack(fill=tk.X, padx=5, pady=5)
            self.online_frame.pack_forget()
        else:
            self.online_frame.pack(fill=tk.X, padx=5, pady=5)
            self.offline_frame.pack_forget()

    # ========================
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    # ========================

    def _on_mode_change(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ OCR."""
        if self.presenter:
            mode = self.mode_var.get()
            self.presenter.set_ocr_mode(mode)
            self._update_sections_visibility()

    def _on_sort_change(self, event=None) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏."""
        if self.presenter:
            settings = self.presenter.get_settings()
            selected_index = self.sort_combo.current()

            if 0 <= selected_index < len(settings.available_sort_methods):
                method_key = settings.available_sort_methods[selected_index]['key']
                self.presenter.set_sort_method(method_key)

    def _on_language_change(self, event=None) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ OCR."""
        if self.presenter:
            language = self.language_var.get()
            self.presenter.update_offline_settings(language=language)

    def _on_psm_change(self, event=None) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è PSM —Ä–µ–∂–∏–º–∞."""
        if self.presenter:
            settings = self.presenter.get_settings()
            selected_index = self.psm_combo.current()

            if 0 <= selected_index < len(settings.available_psm_modes):
                psm_value = settings.available_psm_modes[selected_index]['value']
                self.presenter.update_offline_settings(psm_mode=psm_value)

    def _on_prompt_change(self, event=None) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞."""
        if self.presenter:
            prompt = self.prompt_var.get()
            self.presenter.update_online_settings(prompt_name=prompt)

    def _on_threads_change(self, event=None) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–∫–æ–≤."""
        if self.presenter:
            try:
                threads = self.threads_var.get()
                if 1 <= threads <= 20:
                    self.presenter.update_online_settings(max_threads=threads)
            except tk.TclError:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è

    def _on_output_file_change(self, event=None) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
        if self.presenter:
            output_file = self.output_file_var.get().strip()
            if output_file:
                self.presenter.set_output_file(output_file)

    def _on_metadata_change(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö."""
        if self.presenter:
            include_metadata = self.metadata_var.get()
            settings = self.presenter.get_settings()
            settings.include_metadata = include_metadata

    def _on_browse_output_file(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
        filename = filedialog.asksaveasfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            defaultextension=".txt",
            filetypes=[
                ("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )

        if filename:
            self.output_file_var.set(filename)
            if self.presenter:
                self.presenter.set_output_file(filename)

    def _on_test_connection(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å OCR —Å–µ—Ä–≤–∏—Å–æ–º."""
        if not self.presenter:
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        test_button = None
        for child in self.online_frame.winfo_children():
            if isinstance(child, tk.Button) and "–¢–µ—Å—Ç" in child.cget("text"):
                test_button = child
                break

        if test_button:
            original_text = test_button.cget("text")
            test_button.configure(text="‚è≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...", state=tk.DISABLED)
            self.update()

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
            success = self.presenter.test_ocr_connection()

            if success:
                messagebox.showinfo("–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", "‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å OCR —Å–µ—Ä–≤–∏—Å–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            else:
                messagebox.showwarning("–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ OCR —Å–µ—Ä–≤–∏—Å—É")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞", f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:\n{e}")

        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            if test_button:
                test_button.configure(text=original_text, state=tk.NORMAL)

    def _on_save_settings(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        if self.presenter:
            settings = self.presenter.get_settings()
            if settings.save_settings():
                messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

    def _on_reset_settings(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?"):
            if self.presenter:
                settings = self.presenter.get_settings()
                settings.reset_to_defaults()
                self.update_from_model()
                messagebox.showinfo("–°–±—Ä–æ—Å", "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!")
