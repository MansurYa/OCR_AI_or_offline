"""
–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
"""

import tkinter as tk
from tkinter import ttk, messagebox
import os
import logging
from typing import List, Optional

from ..models.app_model import ImageFile

# –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ç–∏–ø–æ–≤
try:
    from ..presenters.main_presenter import MainPresenter
except ImportError:
    MainPresenter = None


class ImageListView(tk.Frame):
    """
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    """

    def __init__(self, parent: tk.Widget):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

        :param parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        super().__init__(parent)
        self.logger = logging.getLogger(__name__)

        # Presenter –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–∑–∂–µ
        self.presenter: Optional[MainPresenter] = None

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã GUI
        self.treeview: Optional[ttk.Treeview] = None
        self.scrollbar_v: Optional[ttk.Scrollbar] = None
        self.scrollbar_h: Optional[ttk.Scrollbar] = None

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.context_menu: Optional[tk.Menu] = None
        self.selected_item_index: int = -1

        # –°–æ–∑–¥–∞–µ–º GUI
        self._create_gui()
        self._setup_bindings()

    def set_presenter(self, presenter) -> None:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç presenter –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.

        :param presenter: –≠–∫–∑–µ–º–ø–ª—è—Ä MainPresenter
        """
        self.presenter = presenter

    def _create_gui(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞
        header_frame = tk.Frame(self)
        header_frame.pack(fill=tk.X, pady=(0, 5))

        title_label = tk.Label(
            header_frame,
            text="üìã –°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
            font=("Arial", 10, "bold")
        )
        title_label.pack(side=tk.LEFT)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö
        self.info_label = tk.Label(
            header_frame,
            text="–§–∞–π–ª–æ–≤: 0",
            font=("Arial", 9),
            fg="#7f8c8d"
        )
        self.info_label.pack(side=tk.RIGHT)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è treeview –∏ scrollbars
        tree_container = tk.Frame(self)
        tree_container.pack(fill=tk.BOTH, expand=True)

        # –°–æ–∑–¥–∞–µ–º treeview —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏
        columns = ("filename", "size", "status")
        self.treeview = ttk.Treeview(tree_container, columns=columns, show="tree headings", height=10)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        self.treeview.heading("#0", text="‚Ññ", anchor=tk.W)
        self.treeview.heading("filename", text="–ò–º—è —Ñ–∞–π–ª–∞", anchor=tk.W)
        self.treeview.heading("size", text="–†–∞–∑–º–µ—Ä", anchor=tk.E)
        self.treeview.heading("status", text="–°—Ç–∞—Ç—É—Å", anchor=tk.CENTER)

        # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.treeview.column("#0", width=40, minwidth=30, stretch=False)
        self.treeview.column("filename", width=300, minwidth=200, stretch=True)
        self.treeview.column("size", width=80, minwidth=60, stretch=False)
        self.treeview.column("status", width=80, minwidth=60, stretch=False)

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π scrollbar
        self.scrollbar_v = ttk.Scrollbar(tree_container, orient=tk.VERTICAL, command=self.treeview.yview)
        self.treeview.configure(yscrollcommand=self.scrollbar_v.set)

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π scrollbar
        self.scrollbar_h = ttk.Scrollbar(tree_container, orient=tk.HORIZONTAL, command=self.treeview.xview)
        self.treeview.configure(xscrollcommand=self.scrollbar_h.set)

        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.treeview.grid(row=0, column=0, sticky="nsew")
        self.scrollbar_v.grid(row=0, column=1, sticky="ns")
        self.scrollbar_h.grid(row=1, column=0, sticky="ew")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ grid
        tree_container.grid_rowconfigure(0, weight=1)
        tree_container.grid_columnconfigure(0, weight=1)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self._create_context_menu()

    def _create_context_menu(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞."""
        self.context_menu = tk.Menu(self, tearoff=0)

        self.context_menu.add_command(
            label="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
            command=self._on_remove_file
        )

        self.context_menu.add_separator()

        self.context_menu.add_command(
            label="‚¨ÜÔ∏è –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö",
            command=self._on_move_up
        )

        self.context_menu.add_command(
            label="‚¨áÔ∏è –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑",
            command=self._on_move_down
        )

        self.context_menu.add_separator()

        self.context_menu.add_command(
            label="üìÅ –ü–æ–∫–∞–∑–∞—Ç—å –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ",
            command=self._on_show_in_explorer
        )

        self.context_menu.add_command(
            label="‚ÑπÔ∏è –°–≤–æ–π—Å—Ç–≤–∞ —Ñ–∞–π–ª–∞",
            command=self._on_show_properties
        )

    def _setup_bindings(self) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π."""
        # –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
        self.treeview.bind("<Button-3>", self._on_right_click)

        # –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–π—Å—Ç–≤
        self.treeview.bind("<Double-1>", self._on_double_click)

        # –ö–ª–∞–≤–∏—à–∏ Delete –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        self.treeview.bind("<Delete>", self._on_delete_key)

        # –í—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞
        self.treeview.bind("<<TreeviewSelect>>", self._on_selection_changed)

    def update_file_list(self, files: List[ImageFile]) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ treeview.

        :param files: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
        for item in self.treeview.get_children():
            self.treeview.delete(item)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        for i, file_info in enumerate(files, 1):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            size_str = self._format_file_size(file_info.size)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Ü–≤–µ—Ç
            if file_info.is_valid:
                status = "‚úÖ OK"
                tags = ("valid",)
            else:
                status = "‚ùå –û—à–∏–±–∫–∞"
                tags = ("invalid",)

            # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
            item_id = self.treeview.insert(
                "",
                tk.END,
                text=str(i),
                values=(file_info.filename, size_str, status),
                tags=tags
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å —Ñ–∞–π–ª–∞ –≤ item_id –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º file_info.path –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.treeview.tag_configure("valid", foreground="#27ae60")
        self.treeview.tag_configure("invalid", foreground="#e74c3c")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
        self._update_info_label(files)

    def _update_info_label(self, files: List[ImageFile]) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å.

        :param files: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        """
        total_files = len(files)
        valid_files = sum(1 for f in files if f.is_valid)
        total_size = sum(f.size for f in files if f.is_valid)

        if total_files == 0:
            info_text = "–§–∞–π–ª–æ–≤: 0"
        else:
            size_str = self._format_file_size(total_size)

            if valid_files == total_files:
                info_text = f"–§–∞–π–ª–æ–≤: {total_files}, –†–∞–∑–º–µ—Ä: {size_str}"
            else:
                invalid_count = total_files - valid_files
                info_text = f"–§–∞–π–ª–æ–≤: {valid_files}/{total_files}, –†–∞–∑–º–µ—Ä: {size_str} (‚ö†Ô∏è {invalid_count} –æ—à–∏–±–æ–∫)"

        self.info_label.configure(text=info_text)

    def _format_file_size(self, size_bytes: int) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥.

        :param size_bytes: –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
        :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        if size_bytes == 0:
            return "0 B"

        units = ["B", "KB", "MB", "GB"]
        size = float(size_bytes)
        unit_index = 0

        while size >= 1024 and unit_index < len(units) - 1:
            size /= 1024
            unit_index += 1

        if unit_index == 0:
            return f"{int(size)} {units[unit_index]}"
        else:
            return f"{size:.1f} {units[unit_index]}"

    def _get_selected_file_index(self) -> int:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.

        :return: –ò–Ω–¥–µ–∫—Å —Ñ–∞–π–ª–∞ –∏–ª–∏ -1 –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
        """
        selection = self.treeview.selection()
        if not selection:
            return -1

        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1)
            item_text = self.treeview.item(selection[0], "text")
            return int(item_text) - 1  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 0-based –∏–Ω–¥–µ–∫—Å
        except (ValueError, IndexError):
            return -1

    def _get_file_info_by_selection(self) -> Optional[ImageFile]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ.

        :return: ImageFile –∏–ª–∏ None
        """
        if not self.presenter:
            return None

        index = self._get_selected_file_index()
        if index >= 0:
            return self.presenter.get_file_info(index)

        return None

    # ========================
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    # ========================

    def _on_right_click(self, event) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é."""
        # –í—ã–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        item = self.treeview.identify_row(event.y)
        if item:
            self.treeview.selection_set(item)
            self.selected_item_index = self._get_selected_file_index()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
            self._update_context_menu_state()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
            try:
                self.context_menu.tk_popup(event.x_root, event.y_root)
            finally:
                self.context_menu.grab_release()

    def _on_double_click(self, event) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–≤–æ–π—Å—Ç–≤ —Ñ–∞–π–ª–∞."""
        item = self.treeview.identify_row(event.y)
        if item:
            self.treeview.selection_set(item)
            self._on_show_properties()

    def _on_delete_key(self, event) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à–∏ Delete –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞."""
        self._on_remove_file()

    def _on_selection_changed(self, event) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ."""
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
        pass

    def _update_context_menu_state(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–Ω–∫—Ç–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é."""
        if not self.presenter:
            return

        index = self.selected_item_index
        total_files = len(self.presenter.get_image_files())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        can_move_up = index > 0
        can_move_down = index >= 0 and index < total_files - 1

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
        menu_states = {
            1: tk.NORMAL if index >= 0 else tk.DISABLED,  # –£–¥–∞–ª–∏—Ç—å
            3: tk.NORMAL if can_move_up else tk.DISABLED,  # –í–≤–µ—Ä—Ö
            4: tk.NORMAL if can_move_down else tk.DISABLED,  # –í–Ω–∏–∑
            6: tk.NORMAL if index >= 0 else tk.DISABLED,  # –ü–æ–∫–∞–∑–∞—Ç—å –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ
            7: tk.NORMAL if index >= 0 else tk.DISABLED,  # –°–≤–æ–π—Å—Ç–≤–∞
        }

        for menu_index, state in menu_states.items():
            try:
                self.context_menu.entryconfig(menu_index, state=state)
            except tk.TclError:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π

    # ===========================
    # –î–µ–π—Å—Ç–≤–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    # ===========================

    def _on_remove_file(self) -> None:
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª."""
        if not self.presenter:
            return

        index = self._get_selected_file_index()
        if index >= 0:
            file_info = self.presenter.get_file_info(index)
            if file_info:
                if messagebox.askyesno(
                    "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
                    f"–£–¥–∞–ª–∏—Ç—å '{file_info.filename}' –∏–∑ —Å–ø–∏—Å–∫–∞?"
                ):
                    self.presenter.remove_file(index)

    def _on_move_up(self) -> None:
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª –≤–≤–µ—Ä—Ö –ø–æ —Å–ø–∏—Å–∫—É."""
        if not self.presenter:
            return

        index = self._get_selected_file_index()
        if index > 0:
            success = self.presenter.move_file(index, index - 1)
            if success:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –Ω–∞ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
                self._select_item_by_index(index - 1)

    def _on_move_down(self) -> None:
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª –≤–Ω–∏–∑ –ø–æ —Å–ø–∏—Å–∫—É."""
        if not self.presenter:
            return

        index = self._get_selected_file_index()
        total_files = len(self.presenter.get_image_files())

        if index >= 0 and index < total_files - 1:
            success = self.presenter.move_file(index, index + 1)
            if success:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –Ω–∞ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
                self._select_item_by_index(index + 1)

    def _on_show_in_explorer(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ —Å–∏—Å—Ç–µ–º—ã."""
        file_info = self._get_file_info_by_selection()
        if not file_info:
            return

        try:
            import platform
            import subprocess

            if platform.system() == "Windows":
                subprocess.run(["explorer", "/select,", file_info.path])
            elif platform.system() == "Darwin":  # macOS
                subprocess.run(["open", "-R", file_info.path])
            else:  # Linux
                subprocess.run(["xdg-open", os.path.dirname(file_info.path)])

        except Exception as e:
            self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–≤–æ–¥–Ω–∏–∫:\n{e}")

    def _on_show_properties(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
        file_info = self._get_file_info_by_selection()
        if not file_info:
            return

        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ —Ñ–∞–π–ª–∞
        self._show_file_properties_dialog(file_info)

    def _show_file_properties_dialog(self, file_info: ImageFile) -> None:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ —Ñ–∞–π–ª–∞.

        :param file_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        """
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        dialog = tk.Toplevel(self)
        dialog.title(f"–°–≤–æ–π—Å—Ç–≤–∞: {file_info.filename}")
        dialog.geometry("400x300")
        dialog.resizable(False, False)
        dialog.transient(self)
        dialog.grab_set()

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")

        # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        main_frame = tk.Frame(dialog, padx=20, pady=20)
        main_frame.pack(fill=tk.BOTH, expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(
            main_frame,
            text=file_info.filename,
            font=("Arial", 12, "bold"),
            wraplength=350
        )
        title_label.pack(pady=(0, 15))

        # –°–≤–æ–π—Å—Ç–≤–∞ —Ñ–∞–π–ª–∞
        properties = [
            ("–ü–æ–ª–Ω—ã–π –ø—É—Ç—å:", file_info.path),
            ("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:", self._format_file_size(file_info.size)),
            ("–°—Ç–∞—Ç—É—Å:", "‚úÖ –ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ" if file_info.is_valid else "‚ùå –û—à–∏–±–∫–∞"),
        ]

        if not file_info.is_valid and file_info.error_message:
            properties.append(("–û—à–∏–±–∫–∞:", file_info.error_message))

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists(file_info.path):
            try:
                import time
                stat_info = os.stat(file_info.path)

                mod_time = time.strftime("%d.%m.%Y %H:%M:%S", time.localtime(stat_info.st_mtime))
                properties.append(("–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è:", mod_time))

                # –¢–∏–ø —Ñ–∞–π–ª–∞
                _, ext = os.path.splitext(file_info.path)
                properties.append(("–¢–∏–ø —Ñ–∞–π–ª–∞:", f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {ext.upper()}"))

            except (OSError, IOError):
                pass

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
        for label_text, value_text in properties:
            prop_frame = tk.Frame(main_frame)
            prop_frame.pack(fill=tk.X, pady=2)

            label = tk.Label(
                prop_frame,
                text=label_text,
                font=("Arial", 9, "bold"),
                anchor=tk.W,
                width=15
            )
            label.pack(side=tk.LEFT)

            value = tk.Label(
                prop_frame,
                text=value_text,
                font=("Arial", 9),
                anchor=tk.W,
                wraplength=250,
                justify=tk.LEFT
            )
            value.pack(side=tk.LEFT, fill=tk.X, expand=True)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_button = tk.Button(
            main_frame,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            command=dialog.destroy,
            width=10
        )
        close_button.pack(pady=(20, 0))

    def _select_item_by_index(self, index: int) -> None:
        """
        –í—ã–±–∏—Ä–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É.

        :param index: –ò–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ (0-based)
        """
        children = self.treeview.get_children()
        if 0 <= index < len(children):
            item_id = children[index]
            self.treeview.selection_set(item_id)
            self.treeview.focus(item_id)
            self.treeview.see(item_id)

    def get_selected_files(self) -> List[int]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.

        :return: –°–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤
        """
        selected_indices = []
        for item_id in self.treeview.selection():
            try:
                item_text = self.treeview.item(item_id, "text")
                index = int(item_text) - 1  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 0-based
                selected_indices.append(index)
            except (ValueError, IndexError):
                continue

        return selected_indices

    def clear_selection(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—ã–±–æ—Ä –≤ —Å–ø–∏—Å–∫–µ."""
        self.treeview.selection_remove(self.treeview.selection())
