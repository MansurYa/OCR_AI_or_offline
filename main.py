"""
CLI —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è OCR AI or Offline.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –±–µ–∑ GUI.
"""

import sys
import os
import argparse
import logging
import json
from pathlib import Path
from typing import List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å Python
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

try:
    from core.ocr_processor import OCRProcessor
    from core.image_sorter import ImageSorter
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: pip install -r requirements.txt")
    sys.exit(1)


def setup_logging(verbose: bool = False) -> None:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è CLI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    :param verbose: –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
    """
    level = logging.DEBUG if verbose else logging.INFO

    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout)
        ]
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('PIL').setLevel(logging.WARNING)
    logging.getLogger('urllib3').setLevel(logging.WARNING)
    logging.getLogger('requests').setLevel(logging.WARNING)


def load_config(config_path: str) -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞.

    :param config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    :return: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    """
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        print("–ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return {}
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)


def find_images(input_path: str, recursive: bool = False) -> List[str]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–π–ª.

    :param input_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    :param recursive: –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
    :return: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    """
    path = Path(input_path)
    supported_formats = {'.png', '.jpg', '.jpeg', '.tiff', '.bmp', '.gif'}

    if path.is_file():
        if path.suffix.lower() in supported_formats:
            return [str(path)]
        else:
            print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {path.suffix}")
            return []

    elif path.is_dir():
        images = []

        if recursive:
            for ext in supported_formats:
                images.extend(path.rglob(f"*{ext}"))
                images.extend(path.rglob(f"*{ext.upper()}"))
        else:
            for ext in supported_formats:
                images.extend(path.glob(f"*{ext}"))
                images.extend(path.glob(f"*{ext.upper()}"))

        return [str(img) for img in images]

    else:
        print(f"‚ùå –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {input_path}")
        return []


def create_progress_callback(total_files: int):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–æ–ª–±—ç–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ CLI.

    :param total_files: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
    :return: –§—É–Ω–∫—Ü–∏—è –∫–æ–ª–±—ç–∫–∞
    """
    def progress_callback(current: int, total: int, filename: str):
        percentage = (current / total) * 100
        bar_length = 40
        filled_length = int(bar_length * current // total)
        bar = '‚ñà' * filled_length + '-' * (bar_length - filled_length)

        print(f'\r[{bar}] {percentage:.1f}% ({current}/{total}) - {filename}', end='', flush=True)

        if current == total:
            print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –∫–æ–Ω—Ü–µ

    return progress_callback


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    parser = argparse.ArgumentParser(
        description='OCR AI or Offline - –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # Offline OCR –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  python main.py image.png --output result.txt

  # Offline OCR –ø–∞–ø–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
  python main.py /path/to/images --output result.txt --recursive

  # Online OCR —Å –ø—Ä–æ–º–ø—Ç–æ–º –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª
  python main.py /path/to/images --mode online --prompt math_formulas_ocr --output math_text.txt

  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
  python main.py /path/to/images --sort creation_time --output sorted_result.txt

  # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
  python main.py /path/to/images --verbose --output debug_result.txt
        """)

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parser.add_argument('input', help='–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–ª–∏ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏')
    parser.add_argument('--output', '-o', default='ocr_result.txt',
                       help='–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ocr_result.txt)')

    # –†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    parser.add_argument('--mode', '-m', choices=['offline', 'online'], default='offline',
                       help='–†–µ–∂–∏–º OCR: offline (Tesseract) –∏–ª–∏ online (LLM) (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: offline)')

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ offline OCR
    parser.add_argument('--language', '-l', default='rus',
                       help='–Ø–∑—ã–∫ –¥–ª—è Tesseract OCR (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: rus)')
    parser.add_argument('--psm', type=int, default=3,
                       help='Page Segmentation Mode –¥–ª—è Tesseract (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3)')

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ online OCR
    parser.add_argument('--prompt', '-p', default='classic_ocr',
                       help='–ü—Ä–æ–º–ø—Ç –¥–ª—è online OCR (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: classic_ocr)')
    parser.add_argument('--threads', '-t', type=int, default=5,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è online OCR (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5)')

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    parser.add_argument('--sort', '-s',
                       choices=['natural', 'alphabetical', 'creation_time', 'modification_time', 'file_size'],
                       default='natural',
                       help='–ú–µ—Ç–æ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: natural)')

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    parser.add_argument('--recursive', '-r', action='store_true',
                       help='–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö')
    parser.add_argument('--config', '-c', default='config.json',
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: config.json)')
    parser.add_argument('--verbose', '-v', action='store_true',
                       help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    parser.add_argument('--no-metadata', action='store_true',
                       help='–ù–µ –≤–∫–ª—é—á–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç')

    # GUI —Ä–µ–∂–∏–º
    parser.add_argument('--gui', action='store_true',
                       help='–ó–∞–ø—É—Å—Ç–∏—Ç—å GUI –≤–µ—Ä—Å–∏—é')

    args = parser.parse_args()

    # –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è GUI, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ gui_main.py
    if args.gui:
        print("–ó–∞–ø—É—Å–∫ GUI –≤–µ—Ä—Å–∏–∏...")
        try:
            import gui_main
            return gui_main.main()
        except ImportError:
            print("‚ùå GUI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return 1

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(args.verbose)
    logger = logging.getLogger(__name__)

    print("üîç OCR AI or Offline - CLI —Ä–µ–∂–∏–º")
    print("=" * 50)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config(args.config)

    try:
        # –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        print(f"–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤: {args.input}")
        image_paths = find_images(args.input, args.recursive)

        if not image_paths:
            print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return 1

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_paths)}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
        processor = OCRProcessor(args.config)

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤
        if len(image_paths) > 1:
            print(f"–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–µ—Ç–æ–¥–æ–º: {args.sort}")
            image_paths = processor.sort_images(image_paths, args.sort)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_callback = create_progress_callback(len(image_paths))
        processor.set_progress_callback(progress_callback)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        print(f"–ù–∞—á–∏–Ω–∞–µ–º {args.mode} OCR –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        print("-" * 50)

        if args.mode == 'offline':
            # Offline –æ–±—Ä–∞–±–æ—Ç–∫–∞
            result = processor.process_batch(
                image_paths=image_paths,
                output_file=args.output,
                mode='offline',
                sort_method=args.sort,
                language=args.language,
                psm_mode=args.psm
            )
        else:
            # Online –æ–±—Ä–∞–±–æ—Ç–∫–∞
            result = processor.process_batch(
                image_paths=image_paths,
                output_file=args.output,
                mode='online',
                sort_method=args.sort,
                prompt_name=args.prompt,
                max_threads=args.threads
            )

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "=" * 50)
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {result.total_files}")
        print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.successful_files}")
        print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {result.total_files - result.successful_files}")
        print(f"   ‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.total_processing_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {result.output_file_path}")

        if result.successful_files == 0:
            print("‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return 1

        return 0

    except KeyboardInterrupt:
        print("\nüõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 0

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if args.verbose:
            import traceback
            print(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n{traceback.format_exc()}")
        return 1


def show_version():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏."""
    print("OCR AI or Offline v1.0.0")
    print("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print()
    print("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–µ–∂–∏–º—ã:")
    print("  ‚Ä¢ Offline: Tesseract OCR")
    print("  ‚Ä¢ Online: –ò–ò –º–æ–¥–µ–ª–∏ (OpenAI/OpenRouter)")
    print()
    print("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PNG, JPG, JPEG, TIFF, BMP, GIF")


def show_examples():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
    examples = [
        ("–ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞",
         "python main.py image.png --output result.txt"),

        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–∫–∏ –≤ offline —Ä–µ–∂–∏–º–µ",
         "python main.py /path/to/images --output result.txt --recursive"),

        ("Online OCR —Å –ø—Ä–æ–º–ø—Ç–æ–º –¥–ª—è —Ñ–æ—Ä–º—É–ª",
         "python main.py /path/to/images --mode online --prompt math_formulas_ocr"),

        ("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è",
         "python main.py /path/to/images --sort creation_time"),

        ("–Ø–ø–æ–Ω—Å–∫–∏–π —Ç–µ–∫—Å—Ç —Å custom –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏",
         "python main.py japanese_images/ --mode online --prompt japanese_ocr"),

        ("–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏",
         "python main.py images/ --verbose --output debug.txt"),

        ("–ó–∞–ø—É—Å–∫ GUI –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏",
         "python main.py --gui")
    ]

    print("–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OCR AI or Offline:")
    print("=" * 50)

    for i, (description, command) in enumerate(examples, 1):
        print(f"{i}. {description}")
        print(f"   {command}")
        print()


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if len(sys.argv) == 2:
        if sys.argv[1] in ['--version', '-V']:
            show_version()
            sys.exit(0)
        elif sys.argv[1] in ['--examples', '--help-examples']:
            show_examples()
            sys.exit(0)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python
    if sys.version_info < (3, 7):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.7 –∏–ª–∏ –Ω–æ–≤–µ–µ")
        print(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    exit_code = main()
    sys.exit(exit_code)
